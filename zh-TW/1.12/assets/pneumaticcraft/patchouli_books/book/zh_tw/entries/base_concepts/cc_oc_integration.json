{
  "name": "CC/OC 同步",
  "icon": "pneumaticcraft:textures/patchouli/computer.png",
  "category": "base_concepts",
  "flag": "|mod:computercraft,mod:opencomputers",
  "pages": [
    {
      "type": "text",
      "text": "同時安裝了$(thing)電腦/$模組或者$(thing)開放式電腦/$模組時，可以使用其與$(pncr)的任何機器，以及$(l:machines/drone_interface)無人機/$進行交互。$(p)下面列出的所有機器都可以以 CC/OC 外設的形式被交互。"
    },
    {
      "type": "text",
      "title": "電腦工藝",
      "text": "在 Lua 中，可以運行 $(thing)m = peripheral.wrap(<面>)/$ 來調用外設，其中 $(thing)<面>/$ 代表外設被連接在哪一面上，可以為 top（頂面）, bottom（底面）, right（右面）, left（左面）, back（前面）, front（後面）。此後可以通過 $(thing)m.<函數名>/$ 調用下面提及的所有函數。$(p)下午所有以 <面> 作為參數的地方中，up，down，north，south，east，west 為合法參數。",
      "flag": "mod:computercraft"
    },
    {
      "type": "text",
      "title": "Open Computers",
      "text": "需要使用$(item)適配器/$把電腦與$(pncr)機器相連接；其將會被識別為 OC 中的組件，在 OC Lua 環境中運行 $(thing)=components.list()/$ 時將被列出。此後下列提及的所有函數可被調用，例如：$(thing)p = components.air_compressor.getPressure()/$ 將獲取所連接的$(item)空氣壓縮機/$的目前壓力。",
      "flag": "mod:opencomputers"
    },
    {
      "type": "text",
      "title": "一般方法",
      "text": "下列方法對於$(italic)所有/$$(pncr)的機器都適用：$(li)$(#800)getPressure(), getPressure(<面>)/$：獲取該方塊的壓力。<面>參數是可選的，只在獲取$(l:machines/vacuum_pump)真空泵/$的壓力時用到，因為其有與朝向相關的壓力值。$(li)$(#800)getDangerPressure()/$：獲取機器可能爆炸的壓力極限。$(li)$(#800)getCriticalPressure()/$：獲取機器必定會爆炸的壓力極限。"
    },
    {
      "type": "text",
      "title": "熱相關方法",
      "text": "下列方法對於$(italic)所有/$$(pncr)的支持$(l:base_concepts/heat)熱量/$的機器都適用：$(li)$(#800)getTemperature(), getTemperature(<面>)/$：獲取該方塊的溫度。<面>參數是可選的，只在獲取$(l:machines/vortex_tube)渦流管/$的溫度時用到，因為其有與朝向相關的溫度值。"
    },
    {
      "type": "spotlight",
      "anchor": "air_cannon",
      "item": "pneumaticcraft:air_cannon",
      "text": "$(li)$(#800)setExternalControl(<true/false>)/$：傳參為 true 時，將會停用使用通常的方式旋轉（插入定位工具，更改範圍升級的數量...）。$(li)$(#800)setTargetLocation(<x>,<y>,<z>)/$：使空氣加農炮指向傳入的坐標，而非在定位工具中儲存的坐標。"
    },
    {
      "type": "text",
      "title": "空氣炮（續表）",
      "text": "$(li)$(#800)setRotationAngle(<角度>)/$：使空氣加農炮偏轉角旋轉為指定的角度。$(li)$(#800)setHeightAngle(<角度>)/$: 使空氣加農炮將仰角角旋轉為指定的角度。$(li)$(#800)isDoneRotating()/$：當加農炮完成旋轉後，返回 true。$(li)$(#800)getMinWorkingPressure()/$：返回加農炮發射所需要的最小壓力（機器界面中黃色與綠色的分界線）。"
    },
    {
      "type": "text",
      "title": "空氣炮（續表）",
      "text": "$(li)$(#800)fire()/$：當有足夠的壓力發射並且放置有物品時，發射。成功時返回 true。"
    },
    {
      "type": "spotlight",
      "anchor": "elevator",
      "item": "pneumaticcraft:elevator_base",
      "title": "電梯",
      "text": "$(li)$(#800)setExternalControl(<true/false>)/$：傳參為 true 時，將會把電梯的$(#f00)紅石模式/$設定為「電梯呼叫器」模式，此時同樣可以被電腦控制。不需要在調用 $(#800)setTargetHeight()/$ 前調用該方法；該方法會自動將電梯調整為電梯呼叫器模式。"
    },
    {
      "type": "text",
      "title": "電梯（續表）",
      "text": "$(li)$(#800)getMinWorkingPressure()/$：返回使電梯上升的最小壓力（機器界面中內黃色與綠色的分界線）。電梯下降過程不需要壓力。$(li)$(#800)setTargetHeight(<高度>)/$：把電梯的目標高度設為傳入的高度（單位為米/格，浮點數）。$(li)$(#800)getTargetHeight()/$：獲取電梯的目標高度（單位為米/格，浮點數）。$(li)$(#800)getCurrentHeight()/$：獲取電梯的目前高度（單位為米/格，浮點數）。"
    },
    {
      "type": "spotlight",
      "anchor": "plastic_mixer",
      "item": "pneumaticcraft:plastic_mixer",
      "text": "$(li)$(#800)selectColor(<色彩索引>)/$：設定所選要生產的塑膠顏色設為索引（1-16）指定的顏色。調用 $(#800)selectColor(0)/$ 將取消顏色選擇。"
    },
    {
      "type": "spotlight",
      "anchor": "universal_sensor",
      "item": "pneumaticcraft:universal_sensor",
      "text": "$(li)$(#800)getSensorNames()/$：以列表的形式返回所有感測器的名稱。$(li)$(#800)getSensor()/$：返回目前選擇的感測器的名稱。"
    },
    {
      "type": "text",
      "title": "萬能感測器（續表）",
      "text": "$(li)$(#800)setSensor(<感測器名稱>), setSensor(<索引>), setSensor()/$：設定目前選擇的感測器。<感測器名稱>應當屬於 $(#800)getSensorNames()/$ 返回的列表。<索引>是 $(#800)getSensorNames()/$ 所返回的列表的索引。調用不傳參的 $(#800)setSensor()/$ 時，沒有感測器被選擇（機器將閒置，不使用空氣）。如果目前安裝的升級允許傳入的感測器，返回 true。"
    },
    {
      "type": "text",
      "title": "萬能感測器（續表）",
      "text": "$(li)$(#800)setTextField(<文字>)/$：有些感測器使用一個文字框指定附加選項（如：「範圍內的實體」感測器接受$(l:base_concepts/entity_filter)實體過濾字串/$）。可以透過此方法指定這一文字參數。$(li)$(#800)getTextField()/$：返回$(thing)萬能感測器/$目前儲存的文字參數。"
    },
    {
      "type": "text",
      "title": "萬能感測器（續表）",
      "text": "$(li)$(#800)isSensorEventBased()/$：有兩類感測器：基於事件的，以及基於輪詢的。基於時間的感測器會等待到一個時間發生（玩家攻擊，撿起物品）。基於輪詢的感測器隔一段時間檢查一次狀態（範圍內的實體，世界時間，下雨）。如果目前選擇的感測器是基於事件的，返回 true。"
    },
    {
      "type": "text",
      "title": "萬能感測器（續表）",
      "text": "$(li)$(#800)getSensorValue()/$：如果目前的感測器是基於輪詢的，返回其（未取反的）紅石輸出。注意：設定感測器後馬上讀取數據並不可靠，因為很多基於輪詢的感測器並不很頻繁地輪詢，以此來提高效能。因此。該方法發起一個拉取事件，並獲取響應該事件的輸出。當未選擇基於輪詢的感測器時，將拋出一個異常。"
    },
    {
      "type": "text",
      "title": "萬能感測器（續表）",
      "text": "$(li)$(#800)getMinWorkingPressure()/$：返回萬能感測器工作需要的最小壓力（機器界面中黃色與綠色的分界線）。$(li)$(#800)setGPSToolCoordinate(<槽位索引>,<x>,<y>,<z>)/$:把<槽位索引>（從 1 開始）處對應的定位工具儲存的坐標設為提供的坐標。對於需要一個坐標的感測器這很有用。"
    },
    {
      "type": "text",
      "title": "萬能感測器（續表）",
      "text": "對於基於事件的感測器（如：玩家右擊感測器），需要基於事件獲取感測器的值。使用 $(#800)<返回值> = os.PullEvent(\"universalSensor\")/$ 獲取事件。一般而言，返回值包括 <eventName, redstoneStrength>。玩家右擊感測器是一個例外：其返回 <eventName, redstoneStrength, interactedX, interactedY, interactedZ>。這允許一些有趣的用法..."
    }
  ]
}




