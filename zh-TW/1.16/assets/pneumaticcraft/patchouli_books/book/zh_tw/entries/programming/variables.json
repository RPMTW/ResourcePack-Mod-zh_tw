{
  "name": "變數",
  "icon": "minecraft:paper",
  "category": "programming",
  "advancement": "pneumaticcraft:programmer",
  "pages": [
    {
      "type": "text",
      "text": "$(thing)變數/$允許無人機程序儲存並操縱方塊位置（即坐標）以提供高級無人機功能。$(p)要在無人機中創建或操作變數，使用$(l:programming/coordinate_operator)坐標運算元/$與$(l:programming/coordinate)坐標/$拼圖；要對變數進行條件判斷，使用$(l:programming/condition_coordinate)條件：坐標/$拼圖。"
    },
    {
      "type": "text",
      "text": "例如，在$(l:programming/area)區域/$拼圖中可以填入$(thing)變數/$名而非使用固定位置。$(p)這些$(thing)變數/$的值在世界重新載入後仍保持。因而可以，例如，用於無盡的挖礦程序，其中無人機的挖掘位置由$(thing)變數/$指定。$(p)參見$(l:https://www.youtube.com/watch?v=FIjEdD_Yj9Y)由 MineMaarten 製作的 Youtube 影片/$以作為久遠但仍相關的教學。"
    },
    {
      "type": "text",
      "text": "While $(thing)variables/$ only store coordinates (an X/Y/Z triple), if you think about it you will realise that you can work with $(thing)integers/$ and $(thing)booleans/$ too. Just use only one axis for integers, and for booleans, define something like '0' = false, and everything else = true. Have fun!"
    },
    {
      "type": "text",
      "title": "Item Variables",
      "text": "On the previous page, we mentioned that variables can only store coordinates. Well, that was a small lie: there is also such a thing as $(thing)item variables/$, which store (you guessed it) an item value. These are created with the $(l:programming/item_assign)Item Assign/$ and $(l:programming/for_each_item)For Each Item/$ widgets, and used by the $(l:programming/item_filter)Item Filter/$ widget."
    },
    {
      "type": "text",
      "title": "Types of Variable",
      "text": "There are three types of variable:$(li)$(thing)Local variables/$: these are stored per-drone and are referenced simply as 'varname'.$(li)$(thing)Global variables/$: as the name suggests, these are global to all drones and can be used for sharing data between drones. They are referenced as '#varname'.$(li)$(thing)Special Variables/$ can be used to retrieve some metadata about the drone and are referenced as '$varname'."
    },
    {
      "type": "text",
      "anchor": "global",
      "title": "Global Variables",
      "text": "$(thing)Global variables/$ are prefixed with '#'. Normal variables are unique per $(l:tools/drone)Drone/$; they can't be shared. Global variables, however, $(italic)can/$ be shared. This allows Drones to communicate with each other.$(p)Additionally, $(l:tools/gps_tool)GPS Tools/$ can link to and modify them, the $(l:machines/universal_sensor)Universal Sensor/$ can emit a $(#f00)redstone signal/$ based on them, and the $(l:tools/remote)Remote/$ can display and modify them."
    },
    {
      "type": "text",
      "title": "Global Variables (cont.)",
      "text": "For convenience, $(thing)global variables/$ can be set by using the command $(#800)/setGlobalVariable <varName> <x> <y> <z>/$. This is useful in custom maps or for debugging. Execution of this command is not limited to just Server Ops.$(p)To get the variable state (useful for debugging), use $(#800)/getGlobalVariable <varName>/$. This will get both the coordinate and item value."
    },
    {
      "type": "text",
      "anchor": "special",
      "title": "Special Variables",
      "text": "The following special variables are recognised:$(li)$(thing)$owner_pos/$: the (head) blockpos of the player who owns the $(l:tools/drone)Drone/$, or (0,0,0) if the owner is offline.$(li)$(thing)$drone_pos/$: the blockpos of the drone itself.$(li)$(thing)$player_pos=<name>/$: the (head) blockpos of the player '<name>' (case insensitive), or (0,0,0) for invalid or offline player names."
    },
    {
      "type": "text",
      "anchor": "special",
      "title": "Special Variables (cont.)",
      "text": "$(li)$(thing)$owner_look/$: a vector representing the owning player's facing on each axis; each value will be -1, 0 or 1.$(li)$(thing)$controller_pos/$: the blockpos of the controlling $(l:programming/programmable_controller)Programmable Controller/$ block, or (0,0,0) if the drone is an actual drone, rather than a Programmable Controller."
    },
    {
      "type": "text",
      "anchor": "special",
      "title": "Special Variables (cont.)",
      "text": "Several older variables also exist which remain usable for compatibility reasons (but it's recommended to use the variables on the previous page):$(li)$(thing)$owner/$: an alias for $(thing)$owner_pos/$.$(li)$(thing)$drone/$: gets the blockpos $(italic)above/$ the drone, for historical reasons.$(li)$(thing)$player=<name>/$: an alias for $(thing)$player_pos/$."
    },
    {
      "type": "text",
      "title": "Debugging",
      "text": "Sometimes it's useful to display the value of a variable for debugging purposes. You can display a variable's value in a few ways:$(li)Using the $(l:programming/rename)Rename/$ widget to show the variable as a drone's nameplate$(li)Writing text with the $(l:programming/edit_sign)Edit Sign/$ widget$(li)Using a $(l:tools/remote#label)label/$ in a $(l:tools/remote)Remote/$."
    },
    {
      "type": "text",
      "title": "Debugging (cont.)",
      "text": "To interpolate a variable into text displayed by one of the above methods, use the syntax $(thing)${varname}/$.$(p)Note that the special & global variable prefixes still apply here, so to interpolate a drone's position, you would use $(thing)${$drone_pos}/$, and to interpolate a global variable, you would use $(thing)${#globalvarname}/$."
    },
    {
      "type": "text",
      "title": "Debugging (cont.)",
      "text": "You can also display only the X, Y or Z component of the coordinate by suffixing the variable name with $(thing).x/$, $(thing).y/$ or $(thing).z/$ respectively. E.g. to show the drone owner's Y coordinate, use $(thing)${$owner_pos.y}/$.$(p)If the variable is an $(thing)item variable/$, a $(thing).id/$ suffix will get the item's registry ID instead of its display name. This is particularly useful for displaying an item on an $(l:machines/aphorism_tile#items)Aphorism Tile/$."
    }
  ]
}